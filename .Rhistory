findInterval(c(1:7), 1)
findInterval(c(1:7), 2)
findInterval(c(1:7), 6)
findInterval(c(1:10), 2)
findInterval(c(1:10), 1)
findInterval(c(1:10), 9)
findInterval(c(1:10), 9)
findInterval(c(1:10), 5)
install.packages("pkgdown")
library(pkgdown)
usethis::use_git()
install.packages("purrr")
library(purrr)
map_if(1:5, function(a) { return(a > 3) })
apply((iris[c("drat", "gear")]), 2, table)
names(iris)
apply((iris[c("Sepal.Length", "Species")]), 2, table)
as.data.frame(apply((iris[c("Sepal.Length", "Species")]), 2, table))
apply(
iris[c("Sepal.Length", "Species")], 2, table)
apply(iris[c("Sepal.Length", "Species")], 1, table)
apply(iris[c("Sepal.Length", "Species")], 2, table)
discard(c(1, "a", 2), is.character)
discard(list(1, "a", 2), is.character)
install.packages("esquisse")
library(esquisse)
dados <- mtcars
esquisse::esquisser()
# 2 is a table of frequency calculated by columns and 1 are by rows.
apply(mtcars[c("drat", "mpg")], 2, table)
# discarding characters
discard(list(1, "a", 2), is.character)
# discarding characters
purrr::discard(list(1, "a", 2), is.character)
purrr::map_if(1:5, function(a) { return(a > 3) }, )
purrr::map_if(1:5, function(a) { return(a > 3) })
list_df <- list(iris, mtcars)
list_df
purrr::map(list_df, length)
View(iris)
# Or
pur::map(list_df, ~nrow(.x))
# Or
purrr::map(list_df, ~nrow(.x))
# Or
purrr::map(list_df, ~ncol(.x))
# or
purrr::map(list_df, ncol)
# getting the number of each element as vector:
purrr::map_dbl(list_df, ~length(.x))
# getting the output of each element of the list as vector:
purrr::map_dbl(list_df, ~ncol(.x))
# this way we can make a data.frame with the output from map_dbl
data.frame(n_variables = purrr::map_dbl(list_df, ~ncol(.x)))
# or even make this data.frame directly through map_df:
purrr::map_df(list_df, ~ncol(.x))
# or even make this data.frame directly through map_df:
purrr::map_df(list_df, n_variables = ~ncol(.x))
# or even make this data.frame directly through map_df:
purrr::map_df(.x = list_df, ~ncol(.x))
# or even make this data.frame directly through map_df:
purrr::map_df(list_df, ~ncol(.x))
# or even make this data.frame directly through map_df:
purrr::map_df(n_ = list_df, ~ncol(.x))
# or even make this data.frame directly through map_df:
purrr::map_df(.x = list_df, .f = ~ncol(.x))
rlang::last_error()
?map_df
# this way we can make a data.frame with the output from map_dbl
data.frame(n_variables = purrr::map_dbl(list_df, data.frame(.x = ~ ncol(.x)))
purrr::map_df(list_df, data.frame(.x = ~ ncol(.x)))
purrr::map_df(list_df, data.frame(.x = ncol(.x)))
purrr::map_df(list_df, ~data.frame(.x = ncol(.x)))
# or even using the map_df function to get directly the data.frame in the output:
purrr::map_df(list_df, ~data.frame(n_variables = ncol(.x)))
# this way we can make a data.frame with the output from map_dbl
data.frame(n_variables = purrr::map_dbl(list_df, ~nrow(.x)))
# this way we can make a data.frame with the output from map_dbl
data.frame(n_variables = purrr::map_dbl(list_df, ~ncol(.x)))
library(esquisse)
esquisser(mtcars)
esquisse:::esquisser()
func1 <- function(x, y){
if (y = 0){
print(0)
}
}
func1 <- function(x, y){
if (y = 0){
print('0')
}
}
func1 <- function(x, y){
if (y = 0)
print('0')
}
func1 <- function(x, y){
if (y == 0){
print('0')
}
}
func1(1, 0)
func1 <- function(x, y){
if (y == 0){
0
}
else if (y == 1){
x
}
}
func1(1, 0)
func1 <- function(x, y){
if (y == 0){
0
}
else if (y == 1){
x
}
else {
x + func1(x, y - 1)
}
}
func1(14, 60)
func1(0, 0)
func1(1, 1)
func1(2, 2)
func1(3, 3)
func1(4, 4)
10/0
func1(2, 3)
library(flexdashboard)
library(ISLR)
library(car)
library(olsrr)
dados_venda <- Carseats
fit1 <- lm(formula = Sales ~ CompPrice + Income + Advertising + Price + ShelveLoc + Age + Income:Advertising, data = dados_venda)
olsrr::ols_plot_resid_fit(fit1, pch = 20)
olsrr::ols_plot_resid_fit(fit1, print_plot = TRUE)
olsrr::ols_plot_resid_fit(fit1, print_plot = FALSE)
olsrr::ols_plot_resid_fit(fit1, print_plot = TRUE)
1+ 1
setwd("C:/Users/OppenSocial/julia_site")
class(10)
# numeric = número decimal:
class(7.2)
class(10L)
2.3L
class(10, 2.3)
class(c(2.3,10L))
lapply(c(2.3, 10L), class)
class(10L)
class(2,3)
class(c(2,3))
class(T)
class(F)
class(TRUE)
class(FALSE)
class("variável")
var_a <- "5"
var_b <- 5
var_c <- 4.3
var_d <- "TRUE"
is.integer(var_a)
is.character(var_b)
is.numeric(var_c)
is.logical(var_d)
var_a <- as.numeric(var_a)
var_a
is.integer(var_a)
var_a <- as.integer(var_a)
is.integer(var_a)
var_b
as.integer(var_c)
var_c
var_d
as.logical(var_d)
var_a <- "5 + 5"
var_a
as.numeric(var_a)
c<- "amigão"
c
x <- "letra"
Variavel <- x^2
1+1
1-1
Variavel <- amigão
4%%2
rm(list=ls())
library(ggplot2)
ggplot(data = mtcars,
mapping = aes(x = drat, y = mpg)) +
geom_point()
head(mtcars)
head(mtcars)
View(mtcars)
ggplot(data = mtcars,
mapping = aes(x = mpg, y = drat)) +
geom_point(aes(color = gear))
grafico_1 <-
ggplot(data = mtcars,
mapping = aes(x = mpg, y = drat)) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "blue",
se = FALSE,
size = 1)
grafico_1 + labs(title = "Gráfico mpg x drat")
grafico_1 <-
ggplot(data = mtcars,
mapping = aes(x = mpg, y = drat)) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "blue",
se = FALSE,
size = 3)
grafico_1 + labs(title = "Gráfico mpg x drat")
grafico_1 <-
ggplot(data = mtcars,
mapping = aes(x = mpg, y = drat)) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "blue",
se = FALSE,
size = 1)
grafico_1 + labs(title = "Gráfico mpg x drat")
grafico_1 + labs(title = "Gráfico mpg x drat")
grafico_1 + labs(title = "Gráfico mpg x drat")
grafico_1 + labs(title = "Gráfico mpg x drat")
grafico_1 + labs(title = "Gráfico mpg x drat")
